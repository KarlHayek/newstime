# the database is a weighed undirected graph where each node is an article and the edge weights represent the "similarity score"
# between two articles (computed by the classifier)

# start by writing every function in pseudocode

import json, classifier

class Story():

    def __init__(self):
        self.storyKeywords = []
        self.articleIDs = []
        self.id = 0


class Article():

    def __init__(self):
        self.articleKeywords = []
        self.articleURL = ""
        self.id = 0


class Database():

    db = {'Stories':[],
         'Articles':[]}

    weightMatrix = []

    def __init__ (self):
        pass

# addArticle(Article1)
# if database contains no stories:
#     for article in database['Articles']:
#         s = getSimilarityScore(article.ArticleKeywords, Article1.ArticleKeywords)    # could also take articles as arguments
#         weightMatrix[article.ID][Article1.ID] = s
#         weightMatrix[Article1.ID][article.ID] = s  # for symmetry
#     database['Articles'].append(Article1)
# else
#     for story in database['Story']:
#         s = getSimilarityScore(story.StoryKeywords, Article1.StoryKeywords)    # could make story and article inherit from one class
#         if (Article1 verifies rule to belong to story)
#             database['Articles'].append(Article1)     # add Article1 to the database
#             database['Story']['ArticleIDs'].append(Article1.aID)    # make Article1 part of the story

# findArticle(Article2)
# for story in database['Story']:
#

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


import labeler, classifier, json, database

# l1 = labeler.Labeler()
# list1 = l1.extractIntoList("http://money.cnn.com/2018/03/21/technology/mark-zuckerberg-cambridge-analytica-response/index.html")
# print(list1)
# print("\n")

# l1.printJSON()

s1 = database.Story()
s2 = database.Story()
s1.id = 1
s2.id = 2
s1.storyKeywords.extend(("mexico", "trump", "wolfgang"))
s2.storyKeywords.extend(("fingus", "fangis"))

a1 = database.Article()
a2 = database.Article()
a1.id = 5
a2.id = 9
a1.articleKeywords.extend(("mexico", "mirkava", "bratislava"))
a2.articleKeywords.extend(("fingus", "mingus"))

s1.articleIDs.append(a1.id)
s1.articleIDs.append(a2.id)


database.Database.db['Stories'].append(s1)
database.Database.db['Stories'].append(s2)
database.Database.db['Articles'].append(a1)
database.Database.db['Articles'].append(a2)

# for val in database.Database.db['Story']:
#     if(val.id == 1):
#         print(val.articleIDs)

print(database.Database.db)

# with open('labels.json', 'w') as outfile:
#     json.dump(database.Database.db, outfile)
# print (json.dumps(database.Database.db, indent=4))
